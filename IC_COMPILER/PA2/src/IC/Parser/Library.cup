package IC.Parser;

import java.util.ArrayList;
import java.util.Collections;
import java.util.List;

import java_cup.runtime.*;

import IC.DataTypes;
import IC.AST.*;


parser code {:
  private Lexer lexer;
  List<String> errorMessages = new ArrayList<String>();

  public LibraryParser(Lexer lexer) {
    super(lexer);
    this.lexer = lexer;
  }

  public int getLine() {
    return lexer.getLineNumber();
  }

  public void report_error(String message, Object info) {
    if (info instanceof Token) {
      Token tok = (Token) info;

      String errorMessage = "Line " + tok.getLine() + ": " + message + "; unexpected " + tok;
      
      // In many cases only a few actions would have gotten us out of this error.
      // In those cases, we'd like to print what the expected tokens were.
      List<String> possibleActions = getPossibleActions();
      if (possibleActions.size() > 0 && possibleActions.size() <= 5) {
        errorMessage += "; expected one of: " + CourtesyErrorReporter.joinStrings(possibleActions);
      }
      errorMessages.add(errorMessage);

      // In addition, there are some special cases that we inspect the stack and provide a relevant error
      // message to the user.
      String additionalError = CourtesyErrorReporter.tryAnalyzeError(tok, this.stack);
      if (additionalError != null) {
        errorMessages.add(additionalError);
      }
    } else {
      errorMessages.add(message);
    }
  }
  
  public void report_fatal_error(String message, Object info) throws SyntaxError {
    // Stop parsing (not really necessary since we throw an exception, but)
    // (Taken from super, see http://www.docjar.org/html/api/java_cup/runtime/lr_parser.java.html)
    done_parsing();

    String realMessage = "Can't recover from previous error(s):\n" +
        CourtesyErrorReporter.joinStrings(errorMessages, "\n");

    if (info instanceof Token) {
      Token tok = (Token) info;
      throw new SyntaxError(realMessage, tok.getLine());
    }
    
    throw new SyntaxError(realMessage);
  }
  
  private List<String> getPossibleActions() {
    // Goes through all of the possible symbols, and sees if one of them
    // would've resulted in a SHIFT or a REDUCE operation (action != 0).
    List<String> possibleActions = new ArrayList<String>();
    if (stack.empty()) return possibleActions;
    for (Integer possibleSym : symNameGetter.getPossibleSymbols()) {
      short action = get_action(((Symbol)this.stack.peek()).parse_state, possibleSym);
      if (action != 0) {
        possibleActions.add(symNameGetter.getSymbolName(possibleSym));
      }
    }
    return possibleActions;
  }
:};

scan with {: return lexer.next_token(); :};

////////////////////////////////////////////
// Symbol list (terminals and non-terminals)

// Punctuation marks
terminal LP, RP, LB, RB, LCBR, RCBR, SEMI, DOT, COMMA;
// Keywords
terminal CLASS, EXTENDS, STATIC, VOID, INT, BOOLEAN, STRING, RETURN;
terminal IF, ELSE, WHILE, BREAK, CONTINUE, THIS, NEW, LENGTH, TRUE, FALSE, NULL;

// Stuff that have text in them
// Decision: Conversion to Integer will be done NOT here.
terminal String ID, CLASS_ID, INTEGER, QUOTE;

// Assignment operator
terminal ASSIGN;

// Boolean operators
terminal EQUAL, NEQUAL, LT, GT, LTE, GTE;

// Binary operators
terminal BinaryOps PLUS, MINUS, MULTIPLY, DIVIDE, MOD;

// Unary operators
terminal UnaryOps UMINUS, LNEG;

// Conditional operators
terminal LAND, LOR;

non terminal ICClass libic;
non terminal List<Method> libmethod_list;
non terminal LibraryMethod libmethod;
non terminal Type type;
non terminal List<Formal> formals;
non terminal Formal formal;


//////////////
// The grammar

libic ::= CLASS:c CLASS_ID:name LCBR libmethod_list:libmethods RCBR
          {: if (!name.equals("Library")) {
               throw new SyntaxError(
                   "An illegal name was supplied for library signature class (should be 'Library').",
                   cleft,
                   name);
             }
             RESULT = new ICClass(cleft, name, new ArrayList<Field>(), libmethods); 
          :}
          ;

libmethod_list ::= {: RESULT = new ArrayList<Method>(); :}
                   |
                   libmethod_list:libmethods libmethod:libmethod
                   {: libmethods.add(libmethod);
                      RESULT = libmethods;
                   :}
                   ;

libmethod ::= STATIC type:type ID:name LP formals:formals RP SEMI
              {: RESULT = new LibraryMethod(type, name, formals); :}
              |
              STATIC VOID:t ID:name LP formals:formals RP SEMI
              {: Type voidType = new PrimitiveType(tleft, DataTypes.VOID);
                 RESULT = new LibraryMethod(voidType, name, formals);
              :}
              ;

formals ::= {: RESULT = new ArrayList<Formal>(); :}
            |
            formal:formal
            {: List<Formal> formals = new ArrayList<Formal>();
               formals.add(formal);
               RESULT = formals;
            :}
            |
            formals:formals COMMA formal:formal
            {: formals.add(formal);
               RESULT = formals;
            :}
            ;

formal ::= type:type ID:id
           {: RESULT = new Formal(type, id); :}
           ;

type ::= INT:t
         {: RESULT = new PrimitiveType(tleft, DataTypes.INT); :}
         |
         BOOLEAN:t
         {: RESULT = new PrimitiveType(tleft, DataTypes.BOOLEAN); :}
         |
         STRING:t
         {: RESULT = new PrimitiveType(tleft, DataTypes.STRING); :}
         |
         CLASS_ID:name {: RESULT = new UserType(nameleft, name); :}
         |
         type:t LB RB
         {: t.incrementDimension();
            RESULT = t;
         :}
         ;


              